/**
 * @author Christian Klihm
 * @license MIT
 */
(function(viewport){const breakpointObserver={};const breakpoints=[];viewport.Breakpoint=function(key,width){this.key=key;this.width=width;this.callbacks={up:[],down:[]}};Object.defineProperty(viewport.Breakpoint,"current",{get:()=>breakpoints.find(breakpoint=>breakpoint.isActive())});viewport.Breakpoint.prototype.toString=function(){return this.key};viewport.Breakpoint.prototype.isActive=function(){return this.width<=window.innerWidth};viewport.Breakpoint.each=function(callback){breakpoints.forEach(breakpoint=>{callback(breakpoint)})};viewport.Breakpoint.add=function(breakpoint){if(!(breakpoint instanceof viewport.Breakpoint)){throw`error: '${breakpoint}' is not an instance of viewport.Breakpoint`}if(this[breakpoint.key]!==undefined){throw`error: '${breakpoint.key}' already exists`}this[breakpoint.key]=breakpoint;breakpoints.push(breakpoint);breakpoints.sort((a,b)=>{const widthA=a.width;const widthB=b.width;if(widthA<widthB){return 1}if(widthA>widthB){return-1}return 0})};viewport.Breakpoint.remove=function(key){if(!(this[key]instanceof viewport.Breakpoint)){throw`error: '${this[key]}' is not an instance of viewport.Breakpoint`}delete this[key];const breakpoint=breakpoints.find(breakpoint=>breakpoint.key===key);const index=breakpoints.indexOf(breakpoint);breakpoints.splice(index,1)};viewport.addBreakpointObserver=function(callback,name){if(typeof callback==="function"){breakpointObserver[name]=callback}else{throw`error: '${callback}' is not function`}};viewport.removeBreakpointObserver=function(name){delete breakpointObserver[name]};viewport.notifyBreakpointObserver=function(updateData){for(const callback in breakpointObserver){breakpointObserver[callback](updateData)}};viewport.up=function(breakpointKey,callback){if(typeof callback==="function"){this.Breakpoint[breakpointKey].callbacks.up.push(callback)}else{throw`error: '${callback}' is not function`}};viewport.down=function(breakpointKey,callback){if(typeof callback==="function"){this.Breakpoint[breakpointKey].callbacks.down.push(callback)}else{throw`error: '${callback}' is not function`}};viewport.init=function(){let breakpointReference=this.Breakpoint.current;window.addEventListener("resize",()=>{if(breakpointReference!=viewport.Breakpoint.current){viewport.notifyBreakpointObserver({passed:breakpointReference,current:viewport.Breakpoint.current});breakpointReference=viewport.Breakpoint.current}});viewport.addBreakpointObserver(updateData=>{breakpoints.forEach(breakpoint=>{if(breakpoint.isActive()&&breakpoint.callbacks.up.length>0){breakpoint.callbacks.up.forEach(callback=>{callback(updateData)})}else if(!breakpoint.isActive()&&breakpoint.callbacks.down.length>0){breakpoint.callbacks.down.forEach(callback=>{callback(updateData)})}})},"dispatchBreakpointCallbacks");viewport.notifyBreakpointObserver({passed:breakpointReference,current:viewport.Breakpoint.current})}})(window.viewport=window.viewport||{});